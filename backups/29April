#include <GL/glut.h>
#include "src/SOIL.h"
#include <iostream>
#include<string.h>
#include <stdio.h>
#define UP 1
#define DOWN 0
#define MAX 10
#define SIZE_MIS_X 55
#define SIZE_MIS_y 40
#define MAX_MISSILES 3

using namespace std;

int page=0;
int plane_choice=2;

void* currentfont;

float x_step=-171.0, y_step=-171.0;    //for loading bar movement
int y_cre=0;

float y_pos=-00;
float theta=0;
bool state;     //state of plane (either going up or down)

int update_mis;

GLfloat x = 0.0f;

GLfloat fuel=98;
GLfloat dist, missiles;
GLfloat missile_x=250,missile_y[MAX_MISSILES]= {0};
int no_of_missiles=3;

int frames = 5, full = 0;
int i_bck,i_mis1,i_mis2,i_mis3,i_plane,i_sel31,i_sel32, i_fin4;
int i;

GLfloat windowWidth;
GLfloat windowHeight;

GLuint tex_2d, tex_2d_mis[4], tex_2d_plane;
GLuint tex_2d_0, tex_2d_1, tex_2d_2, tex_2d_21, tex_2d_22, tex_2d_31, tex_2df_4;

class plane
{
public:
	float x[MAX], y[MAX], i;
	float ymax, ymin;
	int button;
	plane()
	{
		x[1]=-30, x[2]=30, x[3]=30, x[4]=-30;
		y[1]=15, y[2]=15, y[3]=-15, y[4]=-15;
	}
	void draw_plane()
	{
		glEnable(GL_TEXTURE_2D);
		glEnable(GL_BLEND);
		glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
		if(plane_choice==1)
		{
			if (i_plane == 0)
			{
				tex_2d_plane = SOIL_load_OGL_texture
					       (
						       "plane1.png",
						       SOIL_LOAD_AUTO,
						       SOIL_CREATE_NEW_ID,
						       SOIL_FLAG_MULTIPLY_ALPHA
					       );
				i_plane = 1;
			}
		}
		if(plane_choice==2)
		{
			if (i_plane == 0)
			{
				tex_2d_plane = SOIL_load_OGL_texture
					       (
						       "plane2.png",
						       SOIL_LOAD_AUTO,
						       SOIL_CREATE_NEW_ID,
						       SOIL_FLAG_MULTIPLY_ALPHA
					       );
				i_plane = 1;
			}
		}
		glBindTexture(GL_TEXTURE_2D, tex_2d_plane);
		glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
		glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
		glBegin(GL_POLYGON);
		glTexCoord2f(0.0, 0.0);
		glVertex2f(x[1], y[1]);
		glTexCoord2f(1.0, 0.0);
		glVertex2f(x[2], y[2]);
		glTexCoord2f(1.0, 1.0);
		glVertex2f(x[3], y[3]);
		glTexCoord2f(0.0, 1.0);
		glVertex2f(x[4], y[4]);
		glEnd();
		glDisable(GL_TEXTURE_2D);
		glDisable(GL_BLEND);
	}
} plane1;

void keyboard(unsigned char key, int x, int y)
{
	switch (key)
	{
//27 is the ASCII value of the ESC key
	case 27:
		if(page!=2)
		{
		        i_bck=0,i_mis1=0,i_mis2=0,i_mis3=0,i_plane=0,i_sel31=0,i_sel32=0, i_fin4=0;
		        page=2;
		}
		else
			//exit game
			exit(0);
		break;

	case 'f':       //full screen
		if (full == 0)
		{
			glutFullScreen();
			full = 1;
		}
		else
		{
			glutReshapeWindow(800, 450);
			glutPositionWindow(320,150);
			full = 0;
		}
	}
}

void setFont(void* font)
{
	currentfont=font;
}

void drawString(float x,float y,float z,char* string)
{
	char* c;
	glRasterPos3f(x,y,z);

	for(c=string; *c!='\0'; c++)
	{	glColor3f(0.0,0.0,0.0);
		glutBitmapCharacter(currentfont,*c);
	}
}

void mouse(int button, int m_state, int x, int y)
{
	if(page==1)
	{
		if(x>620 && y>260 && m_state==GLUT_UP)
		{
			cout<<x<<" "<<y<<endl;
			page=2;
		}
	}
	if(page==2)
	{
		if(!full)
		{
			if(m_state==GLUT_UP)
				cout<<x<<" "<<y<<endl;
			if(y>92 && y<116 && m_state==GLUT_UP)
			{
				cout<<"play"<<endl;
				page=31;
			}
			if(y>126 && y<149 && m_state==GLUT_UP)
			{
				cout<<"Settings"<<endl;
			}
			if(y>158 && y<182 && m_state==GLUT_UP)
			{
				cout<<"Instructions"<<endl;
			}
			if(y>193 && y<216 && m_state==GLUT_UP)
			{
				cout<<"Credit"<<endl;
				page=22;
			}
			if(y>226 && y<256 && m_state==GLUT_UP)
			{
				cout<<"Exit"<<endl;
				exit(0);
			}
		}
		else
		{
			if(state==GLUT_UP)
				cout<<x<<" "<<y<<endl;
			if(y>154 && y<195 && m_state==GLUT_UP)
			{
				cout<<"play"<<endl;
				page=31;
			}
			if(y>213 && y<251 && m_state==GLUT_UP)
			{
				cout<<"Settings"<<endl;
			}
			if(y>269 && y<310 && m_state==GLUT_UP)
			{
				cout<<"Instructions"<<endl;
			}
			if(y>329 && y<366 && m_state==GLUT_UP)
			{
				cout<<"Credit"<<endl;
				page=22;
			}
			if(y>387 && y<425 && m_state==GLUT_UP)
			{
				cout<<"Exit"<<endl;
				exit(0);
			}
		}

	}
	if(page==31)
	{
	        if(button==GLUT_LEFT_BUTTON && m_state==GLUT_UP)
	{
		if(full==0)
		{
			cout<<x<<" "<<y<<endl;
			if(y>168 && y<205)
			{
				plane_choice=1;
				i_plane=0;
				glutPostRedisplay();
			}
			if(y>242 && y<287)
			{
				plane_choice=2;
				i_plane=0;
				glutPostRedisplay();
			}
			if(y>300)
			{
			        cout<<"next"<<endl;
			        i_plane=0;
			        page=3;
			}
		}
		else
		{
			if(y>307 && y<347)
			{
				plane_choice=1;
				i_plane=0;
				glutPostRedisplay();
			}
			if(y>416 && y<463)
			{
				plane_choice=2;
				i_plane=0;
				glutPostRedisplay();
			}
			if(y>470)
			{
			        cout<<"next"<<endl;
			        i_plane=0;
			        page=3;
			}
		}
	}
	}
	if(page==3)
	{
		if(button==GLUT_LEFT_BUTTON && m_state==GLUT_DOWN)
		{
			state=UP;
			cout<<"Going Up!"<<endl;
		}
		else if(button==GLUT_LEFT_BUTTON && m_state==GLUT_UP)
		{
			state=DOWN;
			cout<<"Going Down"<<endl;
		}
	}
}

void draw_credit_text()
{
	char string[5][20];
	int i,lengthOfString;

	strcpy(string[3],"PES Institute of Technology, BSC");
	strcpy(string[2],"Thank you!");
	strcpy(string[1],"Arpith (1PE10CS018)");
	strcpy(string[0],"Anil S (1PE10CS015)");

	glLineWidth(1);

	glPushMatrix();
	glTranslatef(-105,130-y_cre,0);
	glScalef(0.1,0.1,0.1);
	lengthOfString = (int)strlen(string[3]);
	for(i=0; i<lengthOfString; i++)
	{
		glColor3f(1,1,1);
		glutStrokeCharacter(GLUT_STROKE_ROMAN,string[3][i]);
	}
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-35,100-y_cre,0);
	glScalef(0.1,0.1,0.1);
	lengthOfString = (int)strlen(string[2]);
	for(i=0; i<lengthOfString; i++)
	{
		glColor3f(1,1,1);
		glutStrokeCharacter(GLUT_STROKE_ROMAN,string[2][i]);
	}
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-160,-110+y_cre,0);
	glScalef(0.1,0.1,0.1);
	lengthOfString = (int)strlen(string[1]);
	for(i=0; i<lengthOfString; i++)
	{
		glColor3f(1,1,1);
		glutStrokeCharacter(GLUT_STROKE_ROMAN,string[1][i]);
	}
	glPopMatrix();

	glPushMatrix();
	glTranslatef(35,-110+y_cre,0);
	glScalef(0.1,0.1,0.1);
	lengthOfString = (int)strlen(string[0]);
	for(i=0; i<lengthOfString; i++)
	{
		glColor3f(1,1,1);
		glutStrokeCharacter(GLUT_STROKE_ROMAN,string[0][i]);
	}
	glPopMatrix();

}

void draw_menu_text()
{
	char string_menu[10][20];
	int lengthOfString,i;

	strcpy(string_menu[0],"Play!");
	strcpy(string_menu[1],"Settings");
	strcpy(string_menu[2],"Instructions");
	strcpy(string_menu[3],"Credit");
	strcpy(string_menu[4],"Exit..");

	glPushMatrix();
	glTranslatef(-120,50,0);
	glScalef(0.1,0.1,0.1);
	lengthOfString = (int)strlen(string_menu[0]);
	for(i=0; i<lengthOfString; i++)
	{
		glColor3f(1,1,1);
		glutStrokeCharacter(GLUT_STROKE_ROMAN,string_menu[0][i]);
	}
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-120,35,0);
	glScalef(0.1,0.1,0.1);
	lengthOfString = (int)strlen(string_menu[1]);
	for(i=0; i<lengthOfString; i++)
	{
		glColor3f(1,1,1);
		glutStrokeCharacter(GLUT_STROKE_ROMAN,string_menu[1][i]);
	}
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-120,20,0);
	glScalef(0.1,0.1,0.1);
	lengthOfString = (int)strlen(string_menu[2]);
	for(i=0; i<lengthOfString; i++)
	{
		glColor3f(1,1,1);
		glutStrokeCharacter(GLUT_STROKE_ROMAN,string_menu[2][i]);
	}
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-120,5,0);
	glScalef(0.1,0.1,0.1);
	lengthOfString = (int)strlen(string_menu[3]);
	for(i=0; i<lengthOfString; i++)
	{
		glColor3f(1,1,1);
		glutStrokeCharacter(GLUT_STROKE_ROMAN,string_menu[3][i]);
	}
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-120,-10,0);
	glScalef(0.1,0.1,0.1);
	lengthOfString = (int)strlen(string_menu[4]);
	for(i=0; i<lengthOfString; i++)
	{
		glColor3f(1,1,1);
		glutStrokeCharacter(GLUT_STROKE_ROMAN,string_menu[4][i]);
	}
	glPopMatrix();
}

void draw_chPlane_text()
{
	char string[15][120];
	int i,lengthOfString;


	strcpy(string[0],"Choose Plane");
	strcpy(string[1],"Paper Plane!");
	strcpy(string[2],"Military X991+");
	strcpy(string[3],"Next");

	glLineWidth(2);
	glPushMatrix();
	glTranslatef(-120,55,0);
	glScalef(0.3,0.3,0.3);
	lengthOfString = (int)strlen(string[0]);
	for(i=0; i<lengthOfString; i++)
	{
		glColor3f(1,1,1);
		glutStrokeCharacter(GLUT_STROKE_ROMAN,string[0][i]);
	}
	glPopMatrix();

	glLineWidth(1);
	int y_pos_21=40;
	for(int k_t=1; k_t<=2; k_t++)
	{
		glPushMatrix();
		glTranslatef(50,y_pos_21-=30,0);
		glScalef(0.1,0.1,0.1);
		lengthOfString = (int)strlen(string[k_t]);
		for(i=0; i<lengthOfString; i++)
		{
			glColor3f(1,1,1);
			glutStrokeCharacter(GLUT_STROKE_ROMAN,string[k_t][i]);
		}
		glPopMatrix();
	}

	glLineWidth(2);
	glPushMatrix();
	glTranslatef(-30,-75,0);
	glScalef(0.15,0.15,0.15);
	lengthOfString = (int)strlen(string[3]);
	for(i=0; i<lengthOfString; i++)
	{
		glColor3f(1,1,1);
		glutStrokeCharacter(GLUT_STROKE_ROMAN,string[3][i]);
	}
	glPopMatrix();

}

void draw_score()
{
	int length;
	char score_text[15];
	strcpy(score_text,"Distance: ");
	glLineWidth(1);
	glPushMatrix();
	glTranslatef(85,82,0);
	glScalef(0.08,0.08,0.08);
	length = (int)strlen(score_text);
	for(i=0; i<length; i++)
	{
		glColor3f(1,1,1);
		glutStrokeCharacter(GLUT_STROKE_ROMAN,score_text[i]);
	}
	glPopMatrix();

	char dist_text_val[15];
	sprintf(dist_text_val,"%d",(int)dist);
	glPushMatrix();
	glTranslatef(130,82,0);
	glScalef(0.08,0.08,0.08);
	length = (int)strlen(dist_text_val);
	for(i=0; i<length; i++)
	{
		glColor3f(1,1,1);
		glutStrokeCharacter(GLUT_STROKE_ROMAN,dist_text_val[i]);
	}
	glPopMatrix();

	char missiles_text[15];
	strcpy(missiles_text,"Missiles: ");
	glPushMatrix();
	glTranslatef(85,72,0);
	glScalef(0.08,0.08,0.08);
	length = (int)strlen(missiles_text);
	for(i=0; i<length; i++)
	{
		glColor3f(1,1,1);
		glutStrokeCharacter(GLUT_STROKE_ROMAN,missiles_text[i]);
	}
	glPopMatrix();

	char mis_text_val[15];
	sprintf(mis_text_val,"%d",(int)missiles);
	glPushMatrix();
	glTranslatef(130,72,0);
	glScalef(0.08,0.08,0.08);
	length = (int)strlen(mis_text_val);
	for(i=0; i<length; i++)
	{
		glColor3f(1,1,1);
		glutStrokeCharacter(GLUT_STROKE_ROMAN,mis_text_val[i]);
	}
	glPopMatrix();

	char fuel_text[15];
	strcpy(fuel_text,"Fuel:  %");
	glPushMatrix();
	glTranslatef(-149,82,0);
	glScalef(0.08,0.08,0.08);
	length = (int)strlen(fuel_text);
	for(i=0; i<length; i++)
	{
		glColor3f(1,1,1);
		glutStrokeCharacter(GLUT_STROKE_ROMAN,fuel_text[i]);
	}
	glPopMatrix();

	char fuel_text_val[15];
	sprintf(fuel_text_val,"%d",(int)fuel);
	glPushMatrix();
	glTranslatef(-125,82,0);
	glScalef(0.08,0.08,0.08);
	length = (int)strlen(fuel_text_val);
	for(i=0; i<length; i++)
	{
		glColor3f(1,1,1);
		glutStrokeCharacter(GLUT_STROKE_ROMAN,fuel_text_val[i]);
	}
	glPopMatrix();
}

void rocket1(int x_cor, int y_cor)
{
	glEnable(GL_TEXTURE_2D);
	glEnable(GL_BLEND);
	glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
	if (i_mis1 == 0)
	{
		tex_2d_mis[1] = SOIL_load_OGL_texture
				(
					"rocket2.png",
					SOIL_LOAD_AUTO,
					SOIL_CREATE_NEW_ID,
					SOIL_FLAG_MULTIPLY_ALPHA
				);
		i_mis1 = 1;
	}
	glBindTexture(GL_TEXTURE_2D, tex_2d_mis[1]);
	glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
	glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
	glBegin(GL_POLYGON);
	glTexCoord2f(0.0, 1.0);
	glVertex2f(x_cor, y_cor);
	glTexCoord2f(1.0, 1.0);
	glVertex2f(x_cor+SIZE_MIS_X, y_cor);
	glTexCoord2f(1.0, 0.0);
	glVertex2f(x_cor+SIZE_MIS_X, y_cor+SIZE_MIS_y-20);
	glTexCoord2f(0.0, 0.0);
	glVertex2f(x_cor, y_cor+SIZE_MIS_y-20);
	glEnd();
	glDisable(GL_TEXTURE_2D);
	glDisable(GL_BLEND);
}

void rocket2(int x_cor, int y_cor)
{
	glEnable(GL_TEXTURE_2D);
	glEnable(GL_BLEND);
	glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
	if (i_mis2 == 0)
	{
		tex_2d_mis[2] = SOIL_load_OGL_texture
				(
					"rocket4.png",
					SOIL_LOAD_AUTO,
					SOIL_CREATE_NEW_ID,
					SOIL_FLAG_MULTIPLY_ALPHA
				);
		i_mis2 = 1;
	}
	glBindTexture(GL_TEXTURE_2D, tex_2d_mis[2]);
	glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
	glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
	glBegin(GL_POLYGON);
	glTexCoord2f(0.0, 1.0);
	glVertex2f(x_cor, y_cor);
	glTexCoord2f(1.0, 1.0);
	glVertex2f(x_cor+SIZE_MIS_X, y_cor);
	glTexCoord2f(1.0, 0.0);
	glVertex2f(x_cor+SIZE_MIS_X, y_cor+SIZE_MIS_y-10);
	glTexCoord2f(0.0, 0.0);
	glVertex2f(x_cor, y_cor+SIZE_MIS_y-10);
	glEnd();
	glDisable(GL_TEXTURE_2D);
	glDisable(GL_BLEND);
}

void rocket3(int x_cor, int y_cor)
{
	glEnable(GL_TEXTURE_2D);
	glEnable(GL_BLEND);
	glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
	if (i_mis3 == 0)
	{
		tex_2d_mis[3] = SOIL_load_OGL_texture
				(
					"rocket4.png",
					SOIL_LOAD_AUTO,
					SOIL_CREATE_NEW_ID,
					SOIL_FLAG_MULTIPLY_ALPHA
				);
		i_mis3 = 1;
	}
	glBindTexture(GL_TEXTURE_2D, tex_2d_mis[3]);
	glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
	glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
	glBegin(GL_POLYGON);
	glTexCoord2f(0.0, 1.0);
	glVertex2f(x_cor, y_cor);
	glTexCoord2f(1.0, 1.0);
	glVertex2f(x_cor+SIZE_MIS_X, y_cor);
	glTexCoord2f(1.0, 0.0);
	glVertex2f(x_cor+SIZE_MIS_X, y_cor+SIZE_MIS_y-10);
	glTexCoord2f(0.0, 0.0);
	glVertex2f(x_cor, y_cor+SIZE_MIS_y-10);
	glEnd();
	glDisable(GL_TEXTURE_2D);
	glDisable(GL_BLEND);
}

void draw_rockets()
{
	if(missile_x>200)
	{
		no_of_missiles=rand()%MAX_MISSILES+1;
	}
	if(missile_x>=195 && missile_x<=200)
	{
		for(int k=1; k<=no_of_missiles; k++)
			missile_y[k]=-101+rand()%165;
	}
	switch(no_of_missiles)
	{
	case 1:
		rocket1(missile_x,missile_y[1]);
		break;
	case 2:
		rocket1(missile_x,missile_y[1]);
		rocket2(missile_x,missile_y[2]);
		break;
	case 3:
		rocket1(missile_x,missile_y[1]);
		rocket2(missile_x,missile_y[2]);
		rocket3(missile_x,missile_y[3]);
		break;
	case 4:
		rocket1(missile_x,missile_y[1]);
		rocket3(missile_x,missile_y[2]);
		rocket2(missile_x,missile_y[3]);
		rocket3(missile_x,missile_y[4]);
		break;
	default:
	case 5:
		rocket1(missile_x,missile_y[1]);
		rocket3(missile_x,missile_y[2]);
		rocket2(missile_x,missile_y[3]);
		rocket3(missile_x,missile_y[4]);
		rocket1(missile_x,missile_y[5]);
		break;

	}
}

void draw_chosen_plane()
{
	glColor3f(1,1,1);
	glBegin(GL_LINE_LOOP);
	glVertex2f(-150,-40);
	glVertex2f(-30,-40);
	glVertex2f(-30,40);
	glVertex2f(-150,40);
	glEnd();

	glPushMatrix();
	glTranslatef(-90,0,0);
	glScalef(1.6,1.6,0);
	plane1.draw_plane();
	glPopMatrix();
}

void RenderScene()
{
	if(page==0)
	{
		glClear(GL_COLOR_BUFFER_BIT);

		//load .png image
		glEnable(GL_TEXTURE_2D);
		glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
		tex_2d_0 = SOIL_load_OGL_texture
			   (
				   "res/loading.png",
				   SOIL_LOAD_RGBA,
				   SOIL_CREATE_NEW_ID,
				   SOIL_FLAG_NTSC_SAFE_RGB
			   );
		glBindTexture(GL_TEXTURE_2D, tex_2d_0);
		glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);


		glBegin(GL_POLYGON);
		glTexCoord2f(0.0, 1.0);
		glVertex2f(-190.0f, -190.0f);
		glTexCoord2f(1.0, 1.0);
		glVertex2f(190.0f, -190.0f);
		glTexCoord2f(1.0, 0.0);
		glVertex2f(190.0f, 190.0f);
		glTexCoord2f(0.0, 0.0);
		glVertex2f(-190.0f, 190.0f);
		glEnd();
		glDisable(GL_TEXTURE_2D);

		//draw loading bar
		glColor3f(1,1,1);
		glBegin(GL_POLYGON);
		glVertex2f(-171.0f, -4.4f);
		glVertex2f(0.0f+x_step, -4.4f);
		glVertex2f(0.0f+x_step, 1.3f);
		glVertex2f(-171.0f, 1.3f);
		glEnd();

		glutSwapBuffers();
		glFlush();
	}
	if(page==1)
	{
		glClear(GL_COLOR_BUFFER_BIT);

		//load .png image
		glEnable(GL_TEXTURE_2D);
		glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
		tex_2d_1 = SOIL_load_OGL_texture
			   (
				   "res/paper.jpg",
				   SOIL_LOAD_RGBA,
				   SOIL_CREATE_NEW_ID,
				   SOIL_FLAG_NTSC_SAFE_RGB
			   );
		glBindTexture(GL_TEXTURE_2D, tex_2d_1);
		glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);


		glBegin(GL_POLYGON);
		glTexCoord2f(0.0, 1.0);
		glVertex2f(-178.0f, -100.0f);
		glTexCoord2f(1.0, 1.0);
		glVertex2f(178.0f, -100.0f);
		glTexCoord2f(1.0, 0.0);
		glVertex2f(178.0f, 100.0f);
		glTexCoord2f(0.0, 0.0);
		glVertex2f(-178.0f, 100.0f);
		glEnd();
		glDisable(GL_TEXTURE_2D);

		setFont(GLUT_BITMAP_TIMES_ROMAN_24);
		glColor3f(0.0,0.0,0.0);
		if(!full)
		{
			drawString(-129.0,65.0,0.0,"PES Institute of Technology");
			setFont(GLUT_BITMAP_HELVETICA_18);
			glColor3f(0.0,0.0,0.0);
			drawString(-90.0,55.0,0.0,"Made By:");
			setFont(GLUT_BITMAP_HELVETICA_18);
			glColor3f(0.0,0.0,0.0);
			drawString(-110.0,45.0,0.0,"Arpith K - 1PE10CS018");
			setFont(GLUT_BITMAP_HELVETICA_18);
			glColor3f(0.0,0.0,0.0);
			drawString(-105.0,35.0,0.0,"Anil S - 1PE10CS015");
			setFont(GLUT_BITMAP_HELVETICA_18);
			glColor3f(0.0,0.0,0.0);
			drawString(130.0,-50.0,0.0,"Next!");
		}
		else
		{
			drawString(-105.0,65.0,0.0,"PES Institute of Technology");
			setFont(GLUT_BITMAP_HELVETICA_18);
			glColor3f(0.0,0.0,0.0);
			drawString(-80.0,55.0,0.0,"Made By:");
			setFont(GLUT_BITMAP_HELVETICA_18);
			glColor3f(0.0,0.0,0.0);
			drawString(-95.0,45.0,0.0,"Arpith K - 1PE10CS018");
			setFont(GLUT_BITMAP_HELVETICA_18);
			glColor3f(0.0,0.0,0.0);
			drawString(-92.0,35.0,0.0,"Anil S - 1PE10CS015");
			setFont(GLUT_BITMAP_TIMES_ROMAN_24);
			glColor3f(0.0,0.0,0.0);
			drawString(125.0,-50.0,0.0,"Click Here!");
			setFont(GLUT_BITMAP_HELVETICA_18);
			glColor3f(0.0,0.0,0.0);
			drawString(135.0,-55.0,0.0,"Next!");
		}


		glutSwapBuffers();
	}
	if(page==2)
	{
		glClear(GL_COLOR_BUFFER_BIT);

		//load .jpg image
		glEnable(GL_TEXTURE_2D);
		glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
		tex_2d_2 = SOIL_load_OGL_texture
			   (
				   "res/plane_menu.jpg",
				   SOIL_LOAD_RGBA,
				   SOIL_CREATE_NEW_ID,
				   SOIL_FLAG_NTSC_SAFE_RGB
			   );
		glBindTexture(GL_TEXTURE_2D, tex_2d_2);
		glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);


		glBegin(GL_POLYGON);
		glTexCoord2f(0.0, 1.0);
		glVertex2f(-178.0f, -100.0f);
		glTexCoord2f(1.0, 1.0);
		glVertex2f(178.0f, -100.0f);
		glTexCoord2f(1.0, 0.0);
		glVertex2f(178.0f, 100.0f);
		glTexCoord2f(0.0, 0.0);
		glVertex2f(-178.0f, 100.0f);
		glEnd();
		glDisable(GL_TEXTURE_2D);

		draw_menu_text();

		glutSwapBuffers();
	}
	if(page==22)
	{
		glClear(GL_COLOR_BUFFER_BIT);

		//load .png image
		glEnable(GL_TEXTURE_2D);
		glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
		tex_2d_22 = SOIL_load_OGL_texture
			    (
				    "res/cre.jpg",
				    SOIL_LOAD_RGBA,
				    SOIL_CREATE_NEW_ID,
				    SOIL_FLAG_NTSC_SAFE_RGB
			    );
		glBindTexture(GL_TEXTURE_2D, tex_2d_22);
		glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);


		glBegin(GL_POLYGON);
		glTexCoord2f(0.0, 1.0);
		glVertex2f(-178.0f, -100.0f);
		glTexCoord2f(1.0, 1.0);
		glVertex2f(178.0f, -100.0f);
		glTexCoord2f(1.0, 0.0);
		glVertex2f(178.0f, 100.0f);
		glTexCoord2f(0.0, 0.0);
		glVertex2f(-178.0f, 100.0f);
		glEnd();
		glDisable(GL_TEXTURE_2D);
		//drawText();
		draw_credit_text();
		glutSwapBuffers();
	}
	if(page==31)
	{
	        glClear(GL_COLOR_BUFFER_BIT);


	glEnable(GL_TEXTURE_2D);

	glColor4f(1.0f, 1.0f, 1.0f, 1.0f);

	if (i_sel31 == 0)
	{
		tex_2d_31 = SOIL_load_OGL_texture
			 (
				 "res/bck_plane.jpg",
				 SOIL_LOAD_RGBA,
				 SOIL_CREATE_NEW_ID,
				 SOIL_FLAG_NTSC_SAFE_RGB
			 );
		i_sel31 = 1;
	}

	glBindTexture(GL_TEXTURE_2D, tex_2d_31);

	glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);

	glBegin(GL_POLYGON);
	glTexCoord2f(0.0, 1.0);
	glVertex2f(-178.0f, -100.0f);
	glTexCoord2f(1.0, 1.0);
	glVertex2f(178.0f, -100.0f);
	glTexCoord2f(1.0, 0.0);
	glVertex2f(178.0f, 100.0f);
	glTexCoord2f(0.0, 0.0);
	glVertex2f(-178.0f, 100.0f);
	glEnd();
	glDisable(GL_TEXTURE_2D);

	draw_chPlane_text();
	draw_chosen_plane();

	glutSwapBuffers();
	}
	if(page==32)
	{

	}
	if(page==3)
	{
		glClear(GL_COLOR_BUFFER_BIT);

		glEnable(GL_TEXTURE_2D);
		glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
		if (i_bck == 0)
		{
			tex_2d = SOIL_load_OGL_texture
				 (
					 "bck1.jpg",
					 SOIL_LOAD_RGBA,
					 SOIL_CREATE_NEW_ID,
					 SOIL_FLAG_NTSC_SAFE_RGB
				 );
			i_bck = 1;
		}
		glBindTexture(GL_TEXTURE_2D, tex_2d);
		glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
		glBegin(GL_POLYGON);
		glTexCoord2f(0.0, 1.0);
		glVertex2f(-190.0f+x, -100.0f);
		glTexCoord2f(1.0, 1.0);
		glVertex2f(790.0f+x, -100.0f);
		glTexCoord2f(1.0, 0.0);
		glVertex2f(790.0f+x, 100.0f);
		glTexCoord2f(0.0, 0.0);
		glVertex2f(-190.0f+x, 100.0f);
		glEnd();
		glDisable(GL_TEXTURE_2D);

		//fuel indicator outline
		glColor3f(0,0,0);
		glLineWidth(3);
		glBegin(GL_LINE_LOOP);
		glVertex2f(-50-100,80);
		glVertex2f(50-100,80);
		glVertex2f(50-100,70);
		glVertex2f(-50-100,70);
		glEnd();

		//fuel indicator
		glColor3f(1,1,1);
		glBegin(GL_POLYGON);
		glVertex2f(-49-100,79);
		glVertex2f(-49+fuel-100,79);
		glVertex2f(-49+fuel-100,71);
		glVertex2f(-49-100,71);
		glEnd();

		//seprator--to seprate score and game screen
		glLineWidth(1);
		glColor3f(1,1,1);
		glBegin(GL_LINES);
		glVertex2f(-200,64);
		glVertex2f(200,64);
		glEnd();

		draw_score();

		draw_rockets();

		glPushMatrix();
		glTranslatef(-130,y_pos,0);
		glRotatef(theta,0,0,1);
		plane1.draw_plane();
		glPopMatrix();
		glutSwapBuffers();
	}
	if(page==4)
	{

	}

}

void TimerFunction(int value)
{
	if(page==0)
	{
		if(x_step<171.0)
			x_step+=6.0;
		else
			page=1;
	}
	if(page==22)
	{
		if(y_cre<80)
			y_cre++;
	}
	if(page==3)
	{
		x-=0.1;
		if(missile_x<-210)
			missile_x=250;
		missile_x-=1;
		if(state==UP)
		{
			if(fuel>0)
				fuel-=.1;
		}

		dist+=0.1;

		//update number of missiles douged
		{
			if(missile_x<-90)
			{
				if(update_mis==0)
				{
					missiles+=no_of_missiles;
					update_mis=1;
				}
			}
			else
				update_mis=0;
		}

		//plane position
		if(state==UP)
		{
			if(y_pos<=90)
				y_pos++;
			if(theta<0)
				theta+=.3;
			else
				theta+=.1;
		}
		else
		{
			if(y_pos>=-100)
				y_pos--;
			if(y_pos>-90)
			{
				if(theta>0)
					theta-=.3;
				else
					theta-=.1;
			}
		}
	}
	glutPostRedisplay();
	glutTimerFunc(frames,TimerFunction, 1);
}

void myinit(void)
{

	glClearColor(0.0f, 0.8f, 0.0f, 1.0f);
	glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
	glEnable(GL_TEXTURE_2D);
	glEnable(GL_BLEND);
}

void ChangeSize(int w, int h)
{
	GLfloat aspectRatio;

	if(h == 0)
		h = 1;

	glViewport(0, 0, w, h);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	aspectRatio = (GLfloat)w / (GLfloat)h;
	if (w <= h)
	{
		windowWidth = 100;
		windowHeight = 100 / aspectRatio;
		glOrtho (-100.0, 100.0, -windowHeight, windowHeight, 1.0, -1.0);
	}
	else
	{
		windowWidth = 100 * aspectRatio;
		windowHeight = 100;
		glOrtho (-windowWidth, windowWidth, -100.0, 100.0, 1.0, -1.0);
	}

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}


int main(int argc, char* argv[])
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowSize(800,450);
	glutCreateWindow("Fuel");
	glutPositionWindow(320,150);
	myinit();
	glutKeyboardFunc(keyboard);
	glutMouseFunc(mouse);
	glutDisplayFunc(RenderScene);
	glutTimerFunc(33, TimerFunction, 1);
	glutReshapeFunc(ChangeSize);
	glutMainLoop();
	return 0;
}

